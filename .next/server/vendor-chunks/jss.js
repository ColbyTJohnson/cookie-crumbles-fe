"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jss";
exports.ids = ["vendor-chunks/jss"];
exports.modules = {

/***/ "(ssr)/./node_modules/jss/dist/jss.esm.js":
/*!******************************************!*\
  !*** ./node_modules/jss/dist/jss.esm.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RuleList: () => (/* binding */ RuleList),\n/* harmony export */   SheetsManager: () => (/* binding */ SheetsManager),\n/* harmony export */   SheetsRegistry: () => (/* binding */ SheetsRegistry),\n/* harmony export */   create: () => (/* binding */ createJss),\n/* harmony export */   createGenerateId: () => (/* binding */ createGenerateId),\n/* harmony export */   createRule: () => (/* binding */ createRule),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getDynamicStyles: () => (/* binding */ getDynamicStyles),\n/* harmony export */   hasCSSTOMSupport: () => (/* binding */ hasCSSTOMSupport),\n/* harmony export */   sheets: () => (/* binding */ sheets),\n/* harmony export */   toCssValue: () => (/* binding */ toCssValue)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var is_in_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! is-in-browser */ \"(ssr)/./node_modules/is-in-browser/dist/module.js\");\n/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tiny-warning */ \"(ssr)/./node_modules/tiny-warning/dist/tiny-warning.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n\n\n\n\n\n\n\nvar plainObjectConstrurctor = {}.constructor;\nfunction cloneStyle(style) {\n    if (style == null || typeof style !== \"object\") return style;\n    if (Array.isArray(style)) return style.map(cloneStyle);\n    if (style.constructor !== plainObjectConstrurctor) return style;\n    var newStyle = {};\n    for(var name in style){\n        newStyle[name] = cloneStyle(style[name]);\n    }\n    return newStyle;\n}\n/**\n * Create a rule instance.\n */ function createRule(name, decl, options) {\n    if (name === void 0) {\n        name = \"unnamed\";\n    }\n    var jss = options.jss;\n    var declCopy = cloneStyle(decl);\n    var rule = jss.plugins.onCreateRule(name, declCopy, options);\n    if (rule) return rule; // It is an at-rule and it has no instance.\n    if (name[0] === \"@\") {\n         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, \"[JSS] Unknown rule \" + name) : 0;\n    }\n    return null;\n}\nvar join = function join(value, by) {\n    var result = \"\";\n    for(var i = 0; i < value.length; i++){\n        // Remove !important from the value, it will be readded later.\n        if (value[i] === \"!important\") break;\n        if (result) result += by;\n        result += value[i];\n    }\n    return result;\n};\n/**\n * Converts JSS array value to a CSS string.\n *\n * `margin: [['5px', '10px']]` > `margin: 5px 10px;`\n * `border: ['1px', '2px']` > `border: 1px, 2px;`\n * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`\n * `color: ['red', !important]` > `color: red !important;`\n */ var toCssValue = function toCssValue(value) {\n    if (!Array.isArray(value)) return value;\n    var cssValue = \"\"; // Support space separated values via `[['5px', '10px']]`.\n    if (Array.isArray(value[0])) {\n        for(var i = 0; i < value.length; i++){\n            if (value[i] === \"!important\") break;\n            if (cssValue) cssValue += \", \";\n            cssValue += join(value[i], \" \");\n        }\n    } else cssValue = join(value, \", \"); // Add !important, because it was ignored.\n    if (value[value.length - 1] === \"!important\") {\n        cssValue += \" !important\";\n    }\n    return cssValue;\n};\nfunction getWhitespaceSymbols(options) {\n    if (options && options.format === false) {\n        return {\n            linebreak: \"\",\n            space: \"\"\n        };\n    }\n    return {\n        linebreak: \"\\n\",\n        space: \" \"\n    };\n}\n/**\n * Indent a string.\n * http://jsperf.com/array-join-vs-for\n */ function indentStr(str, indent) {\n    var result = \"\";\n    for(var index = 0; index < indent; index++){\n        result += \"  \";\n    }\n    return result + str;\n}\n/**\n * Converts a Rule to CSS string.\n */ function toCss(selector, style, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var result = \"\";\n    if (!style) return result;\n    var _options = options, _options$indent = _options.indent, indent = _options$indent === void 0 ? 0 : _options$indent;\n    var fallbacks = style.fallbacks;\n    if (options.format === false) {\n        indent = -Infinity;\n    }\n    var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak, space = _getWhitespaceSymbols.space;\n    if (selector) indent++; // Apply fallbacks first.\n    if (fallbacks) {\n        // Array syntax {fallbacks: [{prop: value}]}\n        if (Array.isArray(fallbacks)) {\n            for(var index = 0; index < fallbacks.length; index++){\n                var fallback = fallbacks[index];\n                for(var prop in fallback){\n                    var value = fallback[prop];\n                    if (value != null) {\n                        if (result) result += linebreak;\n                        result += indentStr(prop + \":\" + space + toCssValue(value) + \";\", indent);\n                    }\n                }\n            }\n        } else {\n            // Object syntax {fallbacks: {prop: value}}\n            for(var _prop in fallbacks){\n                var _value = fallbacks[_prop];\n                if (_value != null) {\n                    if (result) result += linebreak;\n                    result += indentStr(_prop + \":\" + space + toCssValue(_value) + \";\", indent);\n                }\n            }\n        }\n    }\n    for(var _prop2 in style){\n        var _value2 = style[_prop2];\n        if (_value2 != null && _prop2 !== \"fallbacks\") {\n            if (result) result += linebreak;\n            result += indentStr(_prop2 + \":\" + space + toCssValue(_value2) + \";\", indent);\n        }\n    } // Allow empty style in this case, because properties will be added dynamically.\n    if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.\n    if (!selector) return result;\n    indent--;\n    if (result) result = \"\" + linebreak + result + linebreak;\n    return indentStr(\"\" + selector + space + \"{\" + result, indent) + indentStr(\"}\", indent);\n}\nvar escapeRegex = /([[\\].#*$><+~=|^:(),\"'`\\s])/g;\nvar nativeEscape = typeof CSS !== \"undefined\" && CSS.escape;\nvar escape = function(str) {\n    return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, \"\\\\$1\");\n};\nvar BaseStyleRule = /*#__PURE__*/ function() {\n    function BaseStyleRule(key, style, options) {\n        this.type = \"style\";\n        this.isProcessed = false;\n        var sheet = options.sheet, Renderer = options.Renderer;\n        this.key = key;\n        this.options = options;\n        this.style = style;\n        if (sheet) this.renderer = sheet.renderer;\n        else if (Renderer) this.renderer = new Renderer();\n    }\n    /**\n   * Get or set a style property.\n   */ var _proto = BaseStyleRule.prototype;\n    _proto.prop = function prop(name, value, options) {\n        // It's a getter.\n        if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.\n        var force = options ? options.force : false;\n        if (!force && this.style[name] === value) return this;\n        var newValue = value;\n        if (!options || options.process !== false) {\n            newValue = this.options.jss.plugins.onChangeValue(value, name, this);\n        }\n        var isEmpty = newValue == null || newValue === false;\n        var isDefined = name in this.style; // Value is empty and wasn't defined before.\n        if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.\n        var remove = isEmpty && isDefined;\n        if (remove) delete this.style[name];\n        else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.\n        if (this.renderable && this.renderer) {\n            if (remove) this.renderer.removeProperty(this.renderable, name);\n            else this.renderer.setProperty(this.renderable, name, newValue);\n            return this;\n        }\n        var sheet = this.options.sheet;\n        if (sheet && sheet.attached) {\n             true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, '[JSS] Rule is not linked. Missing sheet option \"link: true\".') : 0;\n        }\n        return this;\n    };\n    return BaseStyleRule;\n}();\nvar StyleRule = /*#__PURE__*/ function(_BaseStyleRule) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(StyleRule, _BaseStyleRule);\n    function StyleRule(key, style, options) {\n        var _this;\n        _this = _BaseStyleRule.call(this, key, style, options) || this;\n        var selector = options.selector, scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;\n        if (selector) {\n            _this.selectorText = selector;\n        } else if (scoped !== false) {\n            _this.id = generateId((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__[\"default\"])((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_this)), sheet);\n            _this.selectorText = \".\" + escape(_this.id);\n        }\n        return _this;\n    }\n    /**\n   * Set selector string.\n   * Attention: use this with caution. Most browsers didn't implement\n   * selectorText setter, so this may result in rerendering of entire Style Sheet.\n   */ var _proto2 = StyleRule.prototype;\n    /**\n   * Apply rule to an element inline.\n   */ _proto2.applyTo = function applyTo(renderable) {\n        var renderer = this.renderer;\n        if (renderer) {\n            var json = this.toJSON();\n            for(var prop in json){\n                renderer.setProperty(renderable, prop, json[prop]);\n            }\n        }\n        return this;\n    } /**\n   * Returns JSON representation of the rule.\n   * Fallbacks are not supported.\n   * Useful for inline styles.\n   */ ;\n    _proto2.toJSON = function toJSON() {\n        var json = {};\n        for(var prop in this.style){\n            var value = this.style[prop];\n            if (typeof value !== \"object\") json[prop] = value;\n            else if (Array.isArray(value)) json[prop] = toCssValue(value);\n        }\n        return json;\n    } /**\n   * Generates a CSS string.\n   */ ;\n    _proto2.toString = function toString(options) {\n        var sheet = this.options.sheet;\n        var link = sheet ? sheet.options.link : false;\n        var opts = link ? (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n            allowEmpty: true\n        }) : options;\n        return toCss(this.selectorText, this.style, opts);\n    };\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(StyleRule, [\n        {\n            key: \"selector\",\n            set: function set(selector) {\n                if (selector === this.selectorText) return;\n                this.selectorText = selector;\n                var renderer = this.renderer, renderable = this.renderable;\n                if (!renderable || !renderer) return;\n                var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.\n                if (!hasChanged) {\n                    renderer.replaceRule(renderable, this);\n                }\n            },\n            get: function get() {\n                return this.selectorText;\n            }\n        }\n    ]);\n    return StyleRule;\n}(BaseStyleRule);\nvar pluginStyleRule = {\n    onCreateRule: function onCreateRule(key, style, options) {\n        if (key[0] === \"@\" || options.parent && options.parent.type === \"keyframes\") {\n            return null;\n        }\n        return new StyleRule(key, style, options);\n    }\n};\nvar defaultToStringOptions = {\n    indent: 1,\n    children: true\n};\nvar atRegExp = /@([\\w-]+)/;\n/**\n * Conditional rule for @media, @supports\n */ var ConditionalRule = /*#__PURE__*/ function() {\n    function ConditionalRule(key, styles, options) {\n        this.type = \"conditional\";\n        this.isProcessed = false;\n        this.key = key;\n        var atMatch = key.match(atRegExp);\n        this.at = atMatch ? atMatch[1] : \"unknown\"; // Key might contain a unique suffix in case the `name` passed by user was duplicate.\n        this.query = options.name || \"@\" + this.at;\n        this.options = options;\n        this.rules = new RuleList((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n            parent: this\n        }));\n        for(var name in styles){\n            this.rules.add(name, styles[name]);\n        }\n        this.rules.process();\n    }\n    /**\n   * Get a rule.\n   */ var _proto = ConditionalRule.prototype;\n    _proto.getRule = function getRule(name) {\n        return this.rules.get(name);\n    } /**\n   * Get index of a rule.\n   */ ;\n    _proto.indexOf = function indexOf(rule) {\n        return this.rules.indexOf(rule);\n    } /**\n   * Create and register rule, run plugins.\n   */ ;\n    _proto.addRule = function addRule(name, style, options) {\n        var rule = this.rules.add(name, style, options);\n        if (!rule) return null;\n        this.options.jss.plugins.onProcessRule(rule);\n        return rule;\n    } /**\n   * Replace rule, run plugins.\n   */ ;\n    _proto.replaceRule = function replaceRule(name, style, options) {\n        var newRule = this.rules.replace(name, style, options);\n        if (newRule) this.options.jss.plugins.onProcessRule(newRule);\n        return newRule;\n    } /**\n   * Generates a CSS string.\n   */ ;\n    _proto.toString = function toString(options) {\n        if (options === void 0) {\n            options = defaultToStringOptions;\n        }\n        var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;\n        if (options.indent == null) options.indent = defaultToStringOptions.indent;\n        if (options.children == null) options.children = defaultToStringOptions.children;\n        if (options.children === false) {\n            return this.query + \" {}\";\n        }\n        var children = this.rules.toString(options);\n        return children ? this.query + \" {\" + linebreak + children + linebreak + \"}\" : \"\";\n    };\n    return ConditionalRule;\n}();\nvar keyRegExp = /@container|@media|@supports\\s+/;\nvar pluginConditionalRule = {\n    onCreateRule: function onCreateRule(key, styles, options) {\n        return keyRegExp.test(key) ? new ConditionalRule(key, styles, options) : null;\n    }\n};\nvar defaultToStringOptions$1 = {\n    indent: 1,\n    children: true\n};\nvar nameRegExp = /@keyframes\\s+([\\w-]+)/;\n/**\n * Rule for @keyframes\n */ var KeyframesRule = /*#__PURE__*/ function() {\n    function KeyframesRule(key, frames, options) {\n        this.type = \"keyframes\";\n        this.at = \"@keyframes\";\n        this.isProcessed = false;\n        var nameMatch = key.match(nameRegExp);\n        if (nameMatch && nameMatch[1]) {\n            this.name = nameMatch[1];\n        } else {\n            this.name = \"noname\";\n             true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, \"[JSS] Bad keyframes name \" + key) : 0;\n        }\n        this.key = this.type + \"-\" + this.name;\n        this.options = options;\n        var scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;\n        this.id = scoped === false ? this.name : escape(generateId(this, sheet));\n        this.rules = new RuleList((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n            parent: this\n        }));\n        for(var name in frames){\n            this.rules.add(name, frames[name], (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n                parent: this\n            }));\n        }\n        this.rules.process();\n    }\n    /**\n   * Generates a CSS string.\n   */ var _proto = KeyframesRule.prototype;\n    _proto.toString = function toString(options) {\n        if (options === void 0) {\n            options = defaultToStringOptions$1;\n        }\n        var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;\n        if (options.indent == null) options.indent = defaultToStringOptions$1.indent;\n        if (options.children == null) options.children = defaultToStringOptions$1.children;\n        if (options.children === false) {\n            return this.at + \" \" + this.id + \" {}\";\n        }\n        var children = this.rules.toString(options);\n        if (children) children = \"\" + linebreak + children + linebreak;\n        return this.at + \" \" + this.id + \" {\" + children + \"}\";\n    };\n    return KeyframesRule;\n}();\nvar keyRegExp$1 = /@keyframes\\s+/;\nvar refRegExp = /\\$([\\w-]+)/g;\nvar findReferencedKeyframe = function findReferencedKeyframe(val, keyframes) {\n    if (typeof val === \"string\") {\n        return val.replace(refRegExp, function(match, name) {\n            if (name in keyframes) {\n                return keyframes[name];\n            }\n             true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, '[JSS] Referenced keyframes rule \"' + name + '\" is not defined.') : 0;\n            return match;\n        });\n    }\n    return val;\n};\n/**\n * Replace the reference for a animation name.\n */ var replaceRef = function replaceRef(style, prop, keyframes) {\n    var value = style[prop];\n    var refKeyframe = findReferencedKeyframe(value, keyframes);\n    if (refKeyframe !== value) {\n        style[prop] = refKeyframe;\n    }\n};\nvar pluginKeyframesRule = {\n    onCreateRule: function onCreateRule(key, frames, options) {\n        return typeof key === \"string\" && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;\n    },\n    // Animation name ref replacer.\n    onProcessStyle: function onProcessStyle(style, rule, sheet) {\n        if (rule.type !== \"style\" || !sheet) return style;\n        if (\"animation-name\" in style) replaceRef(style, \"animation-name\", sheet.keyframes);\n        if (\"animation\" in style) replaceRef(style, \"animation\", sheet.keyframes);\n        return style;\n    },\n    onChangeValue: function onChangeValue(val, prop, rule) {\n        var sheet = rule.options.sheet;\n        if (!sheet) {\n            return val;\n        }\n        switch(prop){\n            case \"animation\":\n                return findReferencedKeyframe(val, sheet.keyframes);\n            case \"animation-name\":\n                return findReferencedKeyframe(val, sheet.keyframes);\n            default:\n                return val;\n        }\n    }\n};\nvar KeyframeRule = /*#__PURE__*/ function(_BaseStyleRule) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(KeyframeRule, _BaseStyleRule);\n    function KeyframeRule() {\n        return _BaseStyleRule.apply(this, arguments) || this;\n    }\n    var _proto = KeyframeRule.prototype;\n    /**\n   * Generates a CSS string.\n   */ _proto.toString = function toString(options) {\n        var sheet = this.options.sheet;\n        var link = sheet ? sheet.options.link : false;\n        var opts = link ? (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n            allowEmpty: true\n        }) : options;\n        return toCss(this.key, this.style, opts);\n    };\n    return KeyframeRule;\n}(BaseStyleRule);\nvar pluginKeyframeRule = {\n    onCreateRule: function onCreateRule(key, style, options) {\n        if (options.parent && options.parent.type === \"keyframes\") {\n            return new KeyframeRule(key, style, options);\n        }\n        return null;\n    }\n};\nvar FontFaceRule = /*#__PURE__*/ function() {\n    function FontFaceRule(key, style, options) {\n        this.type = \"font-face\";\n        this.at = \"@font-face\";\n        this.isProcessed = false;\n        this.key = key;\n        this.style = style;\n        this.options = options;\n    }\n    /**\n   * Generates a CSS string.\n   */ var _proto = FontFaceRule.prototype;\n    _proto.toString = function toString(options) {\n        var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;\n        if (Array.isArray(this.style)) {\n            var str = \"\";\n            for(var index = 0; index < this.style.length; index++){\n                str += toCss(this.at, this.style[index]);\n                if (this.style[index + 1]) str += linebreak;\n            }\n            return str;\n        }\n        return toCss(this.at, this.style, options);\n    };\n    return FontFaceRule;\n}();\nvar keyRegExp$2 = /@font-face/;\nvar pluginFontFaceRule = {\n    onCreateRule: function onCreateRule(key, style, options) {\n        return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;\n    }\n};\nvar ViewportRule = /*#__PURE__*/ function() {\n    function ViewportRule(key, style, options) {\n        this.type = \"viewport\";\n        this.at = \"@viewport\";\n        this.isProcessed = false;\n        this.key = key;\n        this.style = style;\n        this.options = options;\n    }\n    /**\n   * Generates a CSS string.\n   */ var _proto = ViewportRule.prototype;\n    _proto.toString = function toString(options) {\n        return toCss(this.key, this.style, options);\n    };\n    return ViewportRule;\n}();\nvar pluginViewportRule = {\n    onCreateRule: function onCreateRule(key, style, options) {\n        return key === \"@viewport\" || key === \"@-ms-viewport\" ? new ViewportRule(key, style, options) : null;\n    }\n};\nvar SimpleRule = /*#__PURE__*/ function() {\n    function SimpleRule(key, value, options) {\n        this.type = \"simple\";\n        this.isProcessed = false;\n        this.key = key;\n        this.value = value;\n        this.options = options;\n    }\n    /**\n   * Generates a CSS string.\n   */ // eslint-disable-next-line no-unused-vars\n    var _proto = SimpleRule.prototype;\n    _proto.toString = function toString(options) {\n        if (Array.isArray(this.value)) {\n            var str = \"\";\n            for(var index = 0; index < this.value.length; index++){\n                str += this.key + \" \" + this.value[index] + \";\";\n                if (this.value[index + 1]) str += \"\\n\";\n            }\n            return str;\n        }\n        return this.key + \" \" + this.value + \";\";\n    };\n    return SimpleRule;\n}();\nvar keysMap = {\n    \"@charset\": true,\n    \"@import\": true,\n    \"@namespace\": true\n};\nvar pluginSimpleRule = {\n    onCreateRule: function onCreateRule(key, value, options) {\n        return key in keysMap ? new SimpleRule(key, value, options) : null;\n    }\n};\nvar plugins = [\n    pluginStyleRule,\n    pluginConditionalRule,\n    pluginKeyframesRule,\n    pluginKeyframeRule,\n    pluginFontFaceRule,\n    pluginViewportRule,\n    pluginSimpleRule\n];\nvar defaultUpdateOptions = {\n    process: true\n};\nvar forceUpdateOptions = {\n    force: true,\n    process: true\n};\nvar RuleList = /*#__PURE__*/ function() {\n    // Rules registry for access by .get() method.\n    // It contains the same rule registered by name and by selector.\n    // Original styles object.\n    // Used to ensure correct rules order.\n    function RuleList(options) {\n        this.map = {};\n        this.raw = {};\n        this.index = [];\n        this.counter = 0;\n        this.options = options;\n        this.classes = options.classes;\n        this.keyframes = options.keyframes;\n    }\n    /**\n   * Create and register rule.\n   *\n   * Will not render after Style Sheet was rendered the first time.\n   */ var _proto = RuleList.prototype;\n    _proto.add = function add(name, decl, ruleOptions) {\n        var _this$options = this.options, parent = _this$options.parent, sheet = _this$options.sheet, jss = _this$options.jss, Renderer = _this$options.Renderer, generateId = _this$options.generateId, scoped = _this$options.scoped;\n        var options = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            classes: this.classes,\n            parent: parent,\n            sheet: sheet,\n            jss: jss,\n            Renderer: Renderer,\n            generateId: generateId,\n            scoped: scoped,\n            name: name,\n            keyframes: this.keyframes,\n            selector: undefined\n        }, ruleOptions); // When user uses .createStyleSheet(), duplicate names are not possible, but\n        // `sheet.addRule()` opens the door for any duplicate rule name. When this happens\n        // we need to make the key unique within this RuleList instance scope.\n        var key = name;\n        if (name in this.raw) {\n            key = name + \"-d\" + this.counter++;\n        } // We need to save the original decl before creating the rule\n        // because cache plugin needs to use it as a key to return a cached rule.\n        this.raw[key] = decl;\n        if (key in this.classes) {\n            // E.g. rules inside of @media container\n            options.selector = \".\" + escape(this.classes[key]);\n        }\n        var rule = createRule(key, decl, options);\n        if (!rule) return null;\n        this.register(rule);\n        var index = options.index === undefined ? this.index.length : options.index;\n        this.index.splice(index, 0, rule);\n        return rule;\n    } /**\n   * Replace rule.\n   * Create a new rule and remove old one instead of overwriting\n   * because we want to invoke onCreateRule hook to make plugins work.\n   */ ;\n    _proto.replace = function replace(name, decl, ruleOptions) {\n        var oldRule = this.get(name);\n        var oldIndex = this.index.indexOf(oldRule);\n        if (oldRule) {\n            this.remove(oldRule);\n        }\n        var options = ruleOptions;\n        if (oldIndex !== -1) options = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, ruleOptions, {\n            index: oldIndex\n        });\n        return this.add(name, decl, options);\n    } /**\n   * Get a rule by name or selector.\n   */ ;\n    _proto.get = function get(nameOrSelector) {\n        return this.map[nameOrSelector];\n    } /**\n   * Delete a rule.\n   */ ;\n    _proto.remove = function remove(rule) {\n        this.unregister(rule);\n        delete this.raw[rule.key];\n        this.index.splice(this.index.indexOf(rule), 1);\n    } /**\n   * Get index of a rule.\n   */ ;\n    _proto.indexOf = function indexOf(rule) {\n        return this.index.indexOf(rule);\n    } /**\n   * Run `onProcessRule()` plugins on every rule.\n   */ ;\n    _proto.process = function process() {\n        var plugins = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop\n        // we end up with very hard-to-track-down side effects.\n        this.index.slice(0).forEach(plugins.onProcessRule, plugins);\n    } /**\n   * Register a rule in `.map`, `.classes` and `.keyframes` maps.\n   */ ;\n    _proto.register = function register(rule) {\n        this.map[rule.key] = rule;\n        if (rule instanceof StyleRule) {\n            this.map[rule.selector] = rule;\n            if (rule.id) this.classes[rule.key] = rule.id;\n        } else if (rule instanceof KeyframesRule && this.keyframes) {\n            this.keyframes[rule.name] = rule.id;\n        }\n    } /**\n   * Unregister a rule.\n   */ ;\n    _proto.unregister = function unregister(rule) {\n        delete this.map[rule.key];\n        if (rule instanceof StyleRule) {\n            delete this.map[rule.selector];\n            delete this.classes[rule.key];\n        } else if (rule instanceof KeyframesRule) {\n            delete this.keyframes[rule.name];\n        }\n    } /**\n   * Update the function values with a new data.\n   */ ;\n    _proto.update = function update() {\n        var name;\n        var data;\n        var options;\n        if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === \"string\") {\n            name = arguments.length <= 0 ? undefined : arguments[0];\n            data = arguments.length <= 1 ? undefined : arguments[1];\n            options = arguments.length <= 2 ? undefined : arguments[2];\n        } else {\n            data = arguments.length <= 0 ? undefined : arguments[0];\n            options = arguments.length <= 1 ? undefined : arguments[1];\n            name = null;\n        }\n        if (name) {\n            this.updateOne(this.get(name), data, options);\n        } else {\n            for(var index = 0; index < this.index.length; index++){\n                this.updateOne(this.index[index], data, options);\n            }\n        }\n    } /**\n   * Execute plugins, update rule props.\n   */ ;\n    _proto.updateOne = function updateOne(rule, data, options) {\n        if (options === void 0) {\n            options = defaultUpdateOptions;\n        }\n        var _this$options2 = this.options, plugins = _this$options2.jss.plugins, sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.\n        if (rule.rules instanceof RuleList) {\n            rule.rules.update(data, options);\n            return;\n        }\n        var style = rule.style;\n        plugins.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.\n        if (options.process && style && style !== rule.style) {\n            // We need to run the plugins in case new `style` relies on syntax plugins.\n            plugins.onProcessStyle(rule.style, rule, sheet); // Update and add props.\n            for(var prop in rule.style){\n                var nextValue = rule.style[prop];\n                var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.\n                // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.\n                if (nextValue !== prevValue) {\n                    rule.prop(prop, nextValue, forceUpdateOptions);\n                }\n            } // Remove props.\n            for(var _prop in style){\n                var _nextValue = rule.style[_prop];\n                var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.\n                // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.\n                if (_nextValue == null && _nextValue !== _prevValue) {\n                    rule.prop(_prop, null, forceUpdateOptions);\n                }\n            }\n        }\n    } /**\n   * Convert rules to a CSS string.\n   */ ;\n    _proto.toString = function toString(options) {\n        var str = \"\";\n        var sheet = this.options.sheet;\n        var link = sheet ? sheet.options.link : false;\n        var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;\n        for(var index = 0; index < this.index.length; index++){\n            var rule = this.index[index];\n            var css = rule.toString(options); // No need to render an empty rule.\n            if (!css && !link) continue;\n            if (str) str += linebreak;\n            str += css;\n        }\n        return str;\n    };\n    return RuleList;\n}();\nvar StyleSheet = /*#__PURE__*/ function() {\n    function StyleSheet(styles, options) {\n        this.attached = false;\n        this.deployed = false;\n        this.classes = {};\n        this.keyframes = {};\n        this.options = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n            sheet: this,\n            parent: this,\n            classes: this.classes,\n            keyframes: this.keyframes\n        });\n        if (options.Renderer) {\n            this.renderer = new options.Renderer(this);\n        }\n        this.rules = new RuleList(this.options);\n        for(var name in styles){\n            this.rules.add(name, styles[name]);\n        }\n        this.rules.process();\n    }\n    /**\n   * Attach renderable to the render tree.\n   */ var _proto = StyleSheet.prototype;\n    _proto.attach = function attach() {\n        if (this.attached) return this;\n        if (this.renderer) this.renderer.attach();\n        this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.\n        if (!this.deployed) this.deploy();\n        return this;\n    } /**\n   * Remove renderable from render tree.\n   */ ;\n    _proto.detach = function detach() {\n        if (!this.attached) return this;\n        if (this.renderer) this.renderer.detach();\n        this.attached = false;\n        return this;\n    } /**\n   * Add a rule to the current stylesheet.\n   * Will insert a rule also after the stylesheet has been rendered first time.\n   */ ;\n    _proto.addRule = function addRule(name, decl, options) {\n        var queue = this.queue; // Plugins can create rules.\n        // In order to preserve the right order, we need to queue all `.addRule` calls,\n        // which happen after the first `rules.add()` call.\n        if (this.attached && !queue) this.queue = [];\n        var rule = this.rules.add(name, decl, options);\n        if (!rule) return null;\n        this.options.jss.plugins.onProcessRule(rule);\n        if (this.attached) {\n            if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.\n            // It will be inserted all together when .attach is called.\n            if (queue) queue.push(rule);\n            else {\n                this.insertRule(rule);\n                if (this.queue) {\n                    this.queue.forEach(this.insertRule, this);\n                    this.queue = undefined;\n                }\n            }\n            return rule;\n        } // We can't add rules to a detached style node.\n        // We will redeploy the sheet once user will attach it.\n        this.deployed = false;\n        return rule;\n    } /**\n   * Replace a rule in the current stylesheet.\n   */ ;\n    _proto.replaceRule = function replaceRule(nameOrSelector, decl, options) {\n        var oldRule = this.rules.get(nameOrSelector);\n        if (!oldRule) return this.addRule(nameOrSelector, decl, options);\n        var newRule = this.rules.replace(nameOrSelector, decl, options);\n        if (newRule) {\n            this.options.jss.plugins.onProcessRule(newRule);\n        }\n        if (this.attached) {\n            if (!this.deployed) return newRule; // Don't replace / delete rule directly if there is no stringified version yet.\n            // It will be inserted all together when .attach is called.\n            if (this.renderer) {\n                if (!newRule) {\n                    this.renderer.deleteRule(oldRule);\n                } else if (oldRule.renderable) {\n                    this.renderer.replaceRule(oldRule.renderable, newRule);\n                }\n            }\n            return newRule;\n        } // We can't replace rules to a detached style node.\n        // We will redeploy the sheet once user will attach it.\n        this.deployed = false;\n        return newRule;\n    } /**\n   * Insert rule into the StyleSheet\n   */ ;\n    _proto.insertRule = function insertRule(rule) {\n        if (this.renderer) {\n            this.renderer.insertRule(rule);\n        }\n    } /**\n   * Create and add rules.\n   * Will render also after Style Sheet was rendered the first time.\n   */ ;\n    _proto.addRules = function addRules(styles, options) {\n        var added = [];\n        for(var name in styles){\n            var rule = this.addRule(name, styles[name], options);\n            if (rule) added.push(rule);\n        }\n        return added;\n    } /**\n   * Get a rule by name or selector.\n   */ ;\n    _proto.getRule = function getRule(nameOrSelector) {\n        return this.rules.get(nameOrSelector);\n    } /**\n   * Delete a rule by name.\n   * Returns `true`: if rule has been deleted from the DOM.\n   */ ;\n    _proto.deleteRule = function deleteRule(name) {\n        var rule = typeof name === \"object\" ? name : this.rules.get(name);\n        if (!rule || // Style sheet was created without link: true and attached, in this case we\n        // won't be able to remove the CSS rule from the DOM.\n        this.attached && !rule.renderable) {\n            return false;\n        }\n        this.rules.remove(rule);\n        if (this.attached && rule.renderable && this.renderer) {\n            return this.renderer.deleteRule(rule.renderable);\n        }\n        return true;\n    } /**\n   * Get index of a rule.\n   */ ;\n    _proto.indexOf = function indexOf(rule) {\n        return this.rules.indexOf(rule);\n    } /**\n   * Deploy pure CSS string to a renderable.\n   */ ;\n    _proto.deploy = function deploy() {\n        if (this.renderer) this.renderer.deploy();\n        this.deployed = true;\n        return this;\n    } /**\n   * Update the function values with a new data.\n   */ ;\n    _proto.update = function update() {\n        var _this$rules;\n        (_this$rules = this.rules).update.apply(_this$rules, arguments);\n        return this;\n    } /**\n   * Updates a single rule.\n   */ ;\n    _proto.updateOne = function updateOne(rule, data, options) {\n        this.rules.updateOne(rule, data, options);\n        return this;\n    } /**\n   * Convert rules to a CSS string.\n   */ ;\n    _proto.toString = function toString(options) {\n        return this.rules.toString(options);\n    };\n    return StyleSheet;\n}();\nvar PluginsRegistry = /*#__PURE__*/ function() {\n    function PluginsRegistry() {\n        this.plugins = {\n            internal: [],\n            external: []\n        };\n        this.registry = {};\n    }\n    var _proto = PluginsRegistry.prototype;\n    /**\n   * Call `onCreateRule` hooks and return an object if returned by a hook.\n   */ _proto.onCreateRule = function onCreateRule(name, decl, options) {\n        for(var i = 0; i < this.registry.onCreateRule.length; i++){\n            var rule = this.registry.onCreateRule[i](name, decl, options);\n            if (rule) return rule;\n        }\n        return null;\n    } /**\n   * Call `onProcessRule` hooks.\n   */ ;\n    _proto.onProcessRule = function onProcessRule(rule) {\n        if (rule.isProcessed) return;\n        var sheet = rule.options.sheet;\n        for(var i = 0; i < this.registry.onProcessRule.length; i++){\n            this.registry.onProcessRule[i](rule, sheet);\n        }\n        if (rule.style) this.onProcessStyle(rule.style, rule, sheet);\n        rule.isProcessed = true;\n    } /**\n   * Call `onProcessStyle` hooks.\n   */ ;\n    _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {\n        for(var i = 0; i < this.registry.onProcessStyle.length; i++){\n            rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);\n        }\n    } /**\n   * Call `onProcessSheet` hooks.\n   */ ;\n    _proto.onProcessSheet = function onProcessSheet(sheet) {\n        for(var i = 0; i < this.registry.onProcessSheet.length; i++){\n            this.registry.onProcessSheet[i](sheet);\n        }\n    } /**\n   * Call `onUpdate` hooks.\n   */ ;\n    _proto.onUpdate = function onUpdate(data, rule, sheet, options) {\n        for(var i = 0; i < this.registry.onUpdate.length; i++){\n            this.registry.onUpdate[i](data, rule, sheet, options);\n        }\n    } /**\n   * Call `onChangeValue` hooks.\n   */ ;\n    _proto.onChangeValue = function onChangeValue(value, prop, rule) {\n        var processedValue = value;\n        for(var i = 0; i < this.registry.onChangeValue.length; i++){\n            processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);\n        }\n        return processedValue;\n    } /**\n   * Register a plugin.\n   */ ;\n    _proto.use = function use(newPlugin, options) {\n        if (options === void 0) {\n            options = {\n                queue: \"external\"\n            };\n        }\n        var plugins = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.\n        if (plugins.indexOf(newPlugin) !== -1) {\n            return;\n        }\n        plugins.push(newPlugin);\n        this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function(registry, plugin) {\n            for(var name in plugin){\n                if (name in registry) {\n                    registry[name].push(plugin[name]);\n                } else {\n                     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, '[JSS] Unknown hook \"' + name + '\".') : 0;\n                }\n            }\n            return registry;\n        }, {\n            onCreateRule: [],\n            onProcessRule: [],\n            onProcessStyle: [],\n            onProcessSheet: [],\n            onChangeValue: [],\n            onUpdate: []\n        });\n    };\n    return PluginsRegistry;\n}();\n/**\n * Sheets registry to access all instances in one place.\n */ var SheetsRegistry = /*#__PURE__*/ function() {\n    function SheetsRegistry() {\n        this.registry = [];\n    }\n    var _proto = SheetsRegistry.prototype;\n    /**\n   * Register a Style Sheet.\n   */ _proto.add = function add(sheet) {\n        var registry = this.registry;\n        var index = sheet.options.index;\n        if (registry.indexOf(sheet) !== -1) return;\n        if (registry.length === 0 || index >= this.index) {\n            registry.push(sheet);\n            return;\n        } // Find a position.\n        for(var i = 0; i < registry.length; i++){\n            if (registry[i].options.index > index) {\n                registry.splice(i, 0, sheet);\n                return;\n            }\n        }\n    } /**\n   * Reset the registry.\n   */ ;\n    _proto.reset = function reset() {\n        this.registry = [];\n    } /**\n   * Remove a Style Sheet.\n   */ ;\n    _proto.remove = function remove(sheet) {\n        var index = this.registry.indexOf(sheet);\n        this.registry.splice(index, 1);\n    } /**\n   * Convert all attached sheets to a CSS string.\n   */ ;\n    _proto.toString = function toString(_temp) {\n        var _ref = _temp === void 0 ? {} : _temp, attached = _ref.attached, options = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(_ref, [\n            \"attached\"\n        ]);\n        var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;\n        var css = \"\";\n        for(var i = 0; i < this.registry.length; i++){\n            var sheet = this.registry[i];\n            if (attached != null && sheet.attached !== attached) {\n                continue;\n            }\n            if (css) css += linebreak;\n            css += sheet.toString(options);\n        }\n        return css;\n    };\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(SheetsRegistry, [\n        {\n            key: \"index\",\n            /**\n     * Current highest index number.\n     */ get: function get() {\n                return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;\n            }\n        }\n    ]);\n    return SheetsRegistry;\n}();\n/**\n * This is a global sheets registry. Only DomRenderer will add sheets to it.\n * On the server one should use an own SheetsRegistry instance and add the\n * sheets to it, because you need to make sure to create a new registry for\n * each request in order to not leak sheets across requests.\n */ var sheets = new SheetsRegistry();\n/* eslint-disable */ /**\n * Now that `globalThis` is available on most platforms\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis#browser_compatibility)\n * we check for `globalThis` first. `globalThis` is necessary for jss\n * to run in Agoric's secure version of JavaScript (SES). Under SES,\n * `globalThis` exists, but `window`, `self`, and `Function('return\n * this')()` are all undefined for security reasons.\n *\n * https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n */ var globalThis$1 = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof self !== \"undefined\" && self.Math === Math ? self : Function(\"return this\")();\nvar ns = \"2f1acc6c3a606b082e5eef5e54414ffb\";\nif (globalThis$1[ns] == null) globalThis$1[ns] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify\n// the current version with just one short number and use it for classes generation\n// we use a counter. Also it is more accurate, because user can manually reevaluate\n// the module.\nvar moduleId = globalThis$1[ns]++;\nvar maxRules = 1e10;\n/**\n * Returns a function which generates unique class names based on counters.\n * When new generator function is created, rule counter is reseted.\n * We need to reset the rule counter for SSR for each request.\n */ var createGenerateId = function createGenerateId(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var ruleCounter = 0;\n    var generateId = function generateId(rule, sheet) {\n        ruleCounter += 1;\n        if (ruleCounter > maxRules) {\n             true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, \"[JSS] You might have a memory leak. Rule counter is at \" + ruleCounter + \".\") : 0;\n        }\n        var jssId = \"\";\n        var prefix = \"\";\n        if (sheet) {\n            if (sheet.options.classNamePrefix) {\n                prefix = sheet.options.classNamePrefix;\n            }\n            if (sheet.options.jss.id != null) {\n                jssId = String(sheet.options.jss.id);\n            }\n        }\n        if (options.minify) {\n            // Using \"c\" because a number can't be the first char in a class name.\n            return \"\" + (prefix || \"c\") + moduleId + jssId + ruleCounter;\n        }\n        return prefix + rule.key + \"-\" + moduleId + (jssId ? \"-\" + jssId : \"\") + \"-\" + ruleCounter;\n    };\n    return generateId;\n};\n/**\n * Cache the value from the first time a function is called.\n */ var memoize = function memoize(fn) {\n    var value;\n    return function() {\n        if (!value) value = fn();\n        return value;\n    };\n};\n/**\n * Get a style property value.\n */ var getPropertyValue = function getPropertyValue(cssRule, prop) {\n    try {\n        // Support CSSTOM.\n        if (cssRule.attributeStyleMap) {\n            return cssRule.attributeStyleMap.get(prop);\n        }\n        return cssRule.style.getPropertyValue(prop);\n    } catch (err) {\n        // IE may throw if property is unknown.\n        return \"\";\n    }\n};\n/**\n * Set a style property.\n */ var setProperty = function setProperty(cssRule, prop, value) {\n    try {\n        var cssValue = value;\n        if (Array.isArray(value)) {\n            cssValue = toCssValue(value);\n        } // Support CSSTOM.\n        if (cssRule.attributeStyleMap) {\n            cssRule.attributeStyleMap.set(prop, cssValue);\n        } else {\n            var indexOfImportantFlag = cssValue ? cssValue.indexOf(\"!important\") : -1;\n            var cssValueWithoutImportantFlag = indexOfImportantFlag > -1 ? cssValue.substr(0, indexOfImportantFlag - 1) : cssValue;\n            cssRule.style.setProperty(prop, cssValueWithoutImportantFlag, indexOfImportantFlag > -1 ? \"important\" : \"\");\n        }\n    } catch (err) {\n        // IE may throw if property is unknown.\n        return false;\n    }\n    return true;\n};\n/**\n * Remove a style property.\n */ var removeProperty = function removeProperty(cssRule, prop) {\n    try {\n        // Support CSSTOM.\n        if (cssRule.attributeStyleMap) {\n            cssRule.attributeStyleMap.delete(prop);\n        } else {\n            cssRule.style.removeProperty(prop);\n        }\n    } catch (err) {\n         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, '[JSS] DOMException \"' + err.message + '\" was thrown. Tried to remove property \"' + prop + '\".') : 0;\n    }\n};\n/**\n * Set the selector.\n */ var setSelector = function setSelector(cssRule, selectorText) {\n    cssRule.selectorText = selectorText; // Return false if setter was not successful.\n    // Currently works in chrome only.\n    return cssRule.selectorText === selectorText;\n};\n/**\n * Gets the `head` element upon the first call and caches it.\n * We assume it can't be null.\n */ var getHead = memoize(function() {\n    return document.querySelector(\"head\");\n});\n/**\n * Find attached sheet with an index higher than the passed one.\n */ function findHigherSheet(registry, options) {\n    for(var i = 0; i < registry.length; i++){\n        var sheet = registry[i];\n        if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {\n            return sheet;\n        }\n    }\n    return null;\n}\n/**\n * Find attached sheet with the highest index.\n */ function findHighestSheet(registry, options) {\n    for(var i = registry.length - 1; i >= 0; i--){\n        var sheet = registry[i];\n        if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {\n            return sheet;\n        }\n    }\n    return null;\n}\n/**\n * Find a comment with \"jss\" inside.\n */ function findCommentNode(text) {\n    var head = getHead();\n    for(var i = 0; i < head.childNodes.length; i++){\n        var node = head.childNodes[i];\n        if (node.nodeType === 8 && node.nodeValue.trim() === text) {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Find a node before which we can insert the sheet.\n */ function findPrevNode(options) {\n    var registry = sheets.registry;\n    if (registry.length > 0) {\n        // Try to insert before the next higher sheet.\n        var sheet = findHigherSheet(registry, options);\n        if (sheet && sheet.renderer) {\n            return {\n                parent: sheet.renderer.element.parentNode,\n                node: sheet.renderer.element\n            };\n        } // Otherwise insert after the last attached.\n        sheet = findHighestSheet(registry, options);\n        if (sheet && sheet.renderer) {\n            return {\n                parent: sheet.renderer.element.parentNode,\n                node: sheet.renderer.element.nextSibling\n            };\n        }\n    } // Try to find a comment placeholder if registry is empty.\n    var insertionPoint = options.insertionPoint;\n    if (insertionPoint && typeof insertionPoint === \"string\") {\n        var comment = findCommentNode(insertionPoint);\n        if (comment) {\n            return {\n                parent: comment.parentNode,\n                node: comment.nextSibling\n            };\n        } // If user specifies an insertion point and it can't be found in the document -\n        // bad specificity issues may appear.\n         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, '[JSS] Insertion point \"' + insertionPoint + '\" not found.') : 0;\n    }\n    return false;\n}\n/**\n * Insert style element into the DOM.\n */ function insertStyle(style, options) {\n    var insertionPoint = options.insertionPoint;\n    var nextNode = findPrevNode(options);\n    if (nextNode !== false && nextNode.parent) {\n        nextNode.parent.insertBefore(style, nextNode.node);\n        return;\n    } // Works with iframes and any node types.\n    if (insertionPoint && typeof insertionPoint.nodeType === \"number\") {\n        var insertionPointElement = insertionPoint;\n        var parentNode = insertionPointElement.parentNode;\n        if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);\n        else  true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, \"[JSS] Insertion point is not in the DOM.\") : 0;\n        return;\n    }\n    getHead().appendChild(style);\n}\n/**\n * Read jss nonce setting from the page if the user has set it.\n */ var getNonce = memoize(function() {\n    var node = document.querySelector('meta[property=\"csp-nonce\"]');\n    return node ? node.getAttribute(\"content\") : null;\n});\nvar _insertRule = function insertRule(container, rule, index) {\n    try {\n        if (\"insertRule\" in container) {\n            container.insertRule(rule, index);\n        } else if (\"appendRule\" in container) {\n            container.appendRule(rule);\n        }\n    } catch (err) {\n         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, \"[JSS] \" + err.message) : 0;\n        return false;\n    }\n    return container.cssRules[index];\n};\nvar getValidRuleInsertionIndex = function getValidRuleInsertionIndex(container, index) {\n    var maxIndex = container.cssRules.length; // In case previous insertion fails, passed index might be wrong\n    if (index === undefined || index > maxIndex) {\n        // eslint-disable-next-line no-param-reassign\n        return maxIndex;\n    }\n    return index;\n};\nvar createStyle = function createStyle() {\n    var el = document.createElement(\"style\"); // Without it, IE will have a broken source order specificity if we\n    // insert rules after we insert the style tag.\n    // It seems to kick-off the source order specificity algorithm.\n    el.textContent = \"\\n\";\n    return el;\n};\nvar DomRenderer = /*#__PURE__*/ function() {\n    // Will be empty if link: true option is not set, because\n    // it is only for use together with insertRule API.\n    function DomRenderer(sheet) {\n        this.getPropertyValue = getPropertyValue;\n        this.setProperty = setProperty;\n        this.removeProperty = removeProperty;\n        this.setSelector = setSelector;\n        this.hasInsertedRules = false;\n        this.cssRules = [];\n        // There is no sheet when the renderer is used from a standalone StyleRule.\n        if (sheet) sheets.add(sheet);\n        this.sheet = sheet;\n        var _ref = this.sheet ? this.sheet.options : {}, media = _ref.media, meta = _ref.meta, element = _ref.element;\n        this.element = element || createStyle();\n        this.element.setAttribute(\"data-jss\", \"\");\n        if (media) this.element.setAttribute(\"media\", media);\n        if (meta) this.element.setAttribute(\"data-meta\", meta);\n        var nonce = getNonce();\n        if (nonce) this.element.setAttribute(\"nonce\", nonce);\n    }\n    /**\n   * Insert style element into render tree.\n   */ var _proto = DomRenderer.prototype;\n    _proto.attach = function attach() {\n        // In the case the element node is external and it is already in the DOM.\n        if (this.element.parentNode || !this.sheet) return;\n        insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`\n        // most browsers create a new CSSStyleSheet, except of all IEs.\n        var deployed = Boolean(this.sheet && this.sheet.deployed);\n        if (this.hasInsertedRules && deployed) {\n            this.hasInsertedRules = false;\n            this.deploy();\n        }\n    } /**\n   * Remove style element from render tree.\n   */ ;\n    _proto.detach = function detach() {\n        if (!this.sheet) return;\n        var parentNode = this.element.parentNode;\n        if (parentNode) parentNode.removeChild(this.element); // In the most browsers, rules inserted using insertRule() API will be lost when style element is removed.\n        // Though IE will keep them and we need a consistent behavior.\n        if (this.sheet.options.link) {\n            this.cssRules = [];\n            this.element.textContent = \"\\n\";\n        }\n    } /**\n   * Inject CSS string into element.\n   */ ;\n    _proto.deploy = function deploy() {\n        var sheet = this.sheet;\n        if (!sheet) return;\n        if (sheet.options.link) {\n            this.insertRules(sheet.rules);\n            return;\n        }\n        this.element.textContent = \"\\n\" + sheet.toString() + \"\\n\";\n    } /**\n   * Insert RuleList into an element.\n   */ ;\n    _proto.insertRules = function insertRules(rules, nativeParent) {\n        for(var i = 0; i < rules.index.length; i++){\n            this.insertRule(rules.index[i], i, nativeParent);\n        }\n    } /**\n   * Insert a rule into element.\n   */ ;\n    _proto.insertRule = function insertRule(rule, index, nativeParent) {\n        if (nativeParent === void 0) {\n            nativeParent = this.element.sheet;\n        }\n        if (rule.rules) {\n            var parent = rule;\n            var latestNativeParent = nativeParent;\n            if (rule.type === \"conditional\" || rule.type === \"keyframes\") {\n                var _insertionIndex = getValidRuleInsertionIndex(nativeParent, index); // We need to render the container without children first.\n                latestNativeParent = _insertRule(nativeParent, parent.toString({\n                    children: false\n                }), _insertionIndex);\n                if (latestNativeParent === false) {\n                    return false;\n                }\n                this.refCssRule(rule, _insertionIndex, latestNativeParent);\n            }\n            this.insertRules(parent.rules, latestNativeParent);\n            return latestNativeParent;\n        }\n        var ruleStr = rule.toString();\n        if (!ruleStr) return false;\n        var insertionIndex = getValidRuleInsertionIndex(nativeParent, index);\n        var nativeRule = _insertRule(nativeParent, ruleStr, insertionIndex);\n        if (nativeRule === false) {\n            return false;\n        }\n        this.hasInsertedRules = true;\n        this.refCssRule(rule, insertionIndex, nativeRule);\n        return nativeRule;\n    };\n    _proto.refCssRule = function refCssRule(rule, index, cssRule) {\n        rule.renderable = cssRule; // We only want to reference the top level rules, deleteRule API doesn't support removing nested rules\n        // like rules inside media queries or keyframes\n        if (rule.options.parent instanceof StyleSheet) {\n            this.cssRules.splice(index, 0, cssRule);\n        }\n    } /**\n   * Delete a rule.\n   */ ;\n    _proto.deleteRule = function deleteRule(cssRule) {\n        var sheet = this.element.sheet;\n        var index = this.indexOf(cssRule);\n        if (index === -1) return false;\n        sheet.deleteRule(index);\n        this.cssRules.splice(index, 1);\n        return true;\n    } /**\n   * Get index of a CSS Rule.\n   */ ;\n    _proto.indexOf = function indexOf(cssRule) {\n        return this.cssRules.indexOf(cssRule);\n    } /**\n   * Generate a new CSS rule and replace the existing one.\n   */ ;\n    _proto.replaceRule = function replaceRule(cssRule, rule) {\n        var index = this.indexOf(cssRule);\n        if (index === -1) return false;\n        this.element.sheet.deleteRule(index);\n        this.cssRules.splice(index, 1);\n        return this.insertRule(rule, index);\n    } /**\n   * Get all rules elements.\n   */ ;\n    _proto.getRules = function getRules() {\n        return this.element.sheet.cssRules;\n    };\n    return DomRenderer;\n}();\nvar instanceCounter = 0;\nvar Jss = /*#__PURE__*/ function() {\n    function Jss(options) {\n        this.id = instanceCounter++;\n        this.version = \"10.10.0\";\n        this.plugins = new PluginsRegistry();\n        this.options = {\n            id: {\n                minify: false\n            },\n            createGenerateId: createGenerateId,\n            Renderer: is_in_browser__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? DomRenderer : null,\n            plugins: []\n        };\n        this.generateId = createGenerateId({\n            minify: false\n        });\n        for(var i = 0; i < plugins.length; i++){\n            this.plugins.use(plugins[i], {\n                queue: \"internal\"\n            });\n        }\n        this.setup(options);\n    }\n    /**\n   * Prepares various options, applies plugins.\n   * Should not be used twice on the same instance, because there is no plugins\n   * deduplication logic.\n   */ var _proto = Jss.prototype;\n    _proto.setup = function setup(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        if (options.createGenerateId) {\n            this.options.createGenerateId = options.createGenerateId;\n        }\n        if (options.id) {\n            this.options.id = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, this.options.id, options.id);\n        }\n        if (options.createGenerateId || options.id) {\n            this.generateId = this.options.createGenerateId(this.options.id);\n        }\n        if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;\n        if (\"Renderer\" in options) {\n            this.options.Renderer = options.Renderer;\n        } // eslint-disable-next-line prefer-spread\n        if (options.plugins) this.use.apply(this, options.plugins);\n        return this;\n    } /**\n   * Create a Style Sheet.\n   */ ;\n    _proto.createStyleSheet = function createStyleSheet(styles, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _options = options, index = _options.index;\n        if (typeof index !== \"number\") {\n            index = sheets.index === 0 ? 0 : sheets.index + 1;\n        }\n        var sheet = new StyleSheet(styles, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n            jss: this,\n            generateId: options.generateId || this.generateId,\n            insertionPoint: this.options.insertionPoint,\n            Renderer: this.options.Renderer,\n            index: index\n        }));\n        this.plugins.onProcessSheet(sheet);\n        return sheet;\n    } /**\n   * Detach the Style Sheet and remove it from the registry.\n   */ ;\n    _proto.removeStyleSheet = function removeStyleSheet(sheet) {\n        sheet.detach();\n        sheets.remove(sheet);\n        return this;\n    } /**\n   * Create a rule without a Style Sheet.\n   * [Deprecated] will be removed in the next major version.\n   */ ;\n    _proto.createRule = function createRule$1(name, style, options) {\n        if (style === void 0) {\n            style = {};\n        }\n        if (options === void 0) {\n            options = {};\n        }\n        // Enable rule without name for inline styles.\n        if (typeof name === \"object\") {\n            return this.createRule(undefined, name, style);\n        }\n        var ruleOptions = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n            name: name,\n            jss: this,\n            Renderer: this.options.Renderer\n        });\n        if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;\n        if (!ruleOptions.classes) ruleOptions.classes = {};\n        if (!ruleOptions.keyframes) ruleOptions.keyframes = {};\n        var rule = createRule(name, style, ruleOptions);\n        if (rule) this.plugins.onProcessRule(rule);\n        return rule;\n    } /**\n   * Register plugin. Passed function will be invoked with a rule instance.\n   */ ;\n    _proto.use = function use() {\n        var _this = this;\n        for(var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++){\n            plugins[_key] = arguments[_key];\n        }\n        plugins.forEach(function(plugin) {\n            _this.plugins.use(plugin);\n        });\n        return this;\n    };\n    return Jss;\n}();\nvar createJss = function createJss(options) {\n    return new Jss(options);\n};\n/**\n * SheetsManager is like a WeakMap which is designed to count StyleSheet\n * instances and attach/detach automatically.\n * Used in react-jss.\n */ var SheetsManager = /*#__PURE__*/ function() {\n    function SheetsManager() {\n        this.length = 0;\n        this.sheets = new WeakMap();\n    }\n    var _proto = SheetsManager.prototype;\n    _proto.get = function get(key) {\n        var entry = this.sheets.get(key);\n        return entry && entry.sheet;\n    };\n    _proto.add = function add(key, sheet) {\n        if (this.sheets.has(key)) return;\n        this.length++;\n        this.sheets.set(key, {\n            sheet: sheet,\n            refs: 0\n        });\n    };\n    _proto.manage = function manage(key) {\n        var entry = this.sheets.get(key);\n        if (entry) {\n            if (entry.refs === 0) {\n                entry.sheet.attach();\n            }\n            entry.refs++;\n            return entry.sheet;\n        }\n        (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, \"[JSS] SheetsManager: can't find sheet to manage\");\n        return undefined;\n    };\n    _proto.unmanage = function unmanage(key) {\n        var entry = this.sheets.get(key);\n        if (entry) {\n            if (entry.refs > 0) {\n                entry.refs--;\n                if (entry.refs === 0) entry.sheet.detach();\n            }\n        } else {\n            (0,tiny_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, \"SheetsManager: can't find sheet to unmanage\");\n        }\n    };\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(SheetsManager, [\n        {\n            key: \"size\",\n            get: function get() {\n                return this.length;\n            }\n        }\n    ]);\n    return SheetsManager;\n}();\n/**\n* Export a constant indicating if this browser has CSSTOM support.\n* https://developers.google.com/web/updates/2018/03/cssom\n*/ var hasCSSTOMSupport = typeof CSS === \"object\" && CSS != null && \"number\" in CSS;\n/**\n * Extracts a styles object with only props that contain function values.\n */ function getDynamicStyles(styles) {\n    var to = null;\n    for(var key in styles){\n        var value = styles[key];\n        var type = typeof value;\n        if (type === \"function\") {\n            if (!to) to = {};\n            to[key] = value;\n        } else if (type === \"object\" && value !== null && !Array.isArray(value)) {\n            var extracted = getDynamicStyles(value);\n            if (extracted) {\n                if (!to) to = {};\n                to[key] = extracted;\n            }\n        }\n    }\n    return to;\n}\n/**\n * A better abstraction over CSS.\n *\n * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present\n * @website https://github.com/cssinjs/jss\n * @license MIT\n */ var index = createJss();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jss/dist/jss.esm.js\n");

/***/ })

};
;